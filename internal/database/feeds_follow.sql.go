// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds_follow.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted AS(
  INSERT INTO feed_follows (created_at, updated_at, user_id, feed_id)
  VALUES (
    $1,
    $2,
    $3,
    $4
  )
  RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT inserted.id, inserted.created_at, inserted.updated_at, inserted.user_id, inserted.feed_id, users.name AS username, feeds.name AS feed_name
FROM inserted
INNER JOIN users ON inserted.user_id = users.id
INNER JOIN feeds ON inserted.feed_id = feeds.id
`

type CreateFeedFollowParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    int32
}

type CreateFeedFollowRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    int32
	Username  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.Username,
		&i.FeedName,
	)
	return i, err
}

const getFeedsFollowForUser = `-- name: GetFeedsFollowForUser :many
SELECT feed_follows.id,  users.name AS username, feeds.name AS feed_name, 
  feed_follows.created_at, feed_follows.updated_at, 
  feed_follows.user_id, feed_follows.feed_id
FROM feed_follows
INNER JOIN users ON feed_follows.user_id = users.id
INNER JOIN feeds ON feed_follows.feed_id = feeds.id
WHERE users.name = $1
`

type GetFeedsFollowForUserRow struct {
	ID        int32
	Username  string
	FeedName  string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    int32
}

func (q *Queries) GetFeedsFollowForUser(ctx context.Context, name string) ([]GetFeedsFollowForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsFollowForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsFollowForUserRow
	for rows.Next() {
		var i GetFeedsFollowForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FeedName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFeed = `-- name: UnfollowFeed :exec
DELETE FROM feed_follows
WHERE user_id = $1 AND feed_id = $2
`

type UnfollowFeedParams struct {
	UserID uuid.UUID
	FeedID int32
}

func (q *Queries) UnfollowFeed(ctx context.Context, arg UnfollowFeedParams) error {
	_, err := q.db.ExecContext(ctx, unfollowFeed, arg.UserID, arg.FeedID)
	return err
}
